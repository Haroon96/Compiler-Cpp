DEF_STATEMENT                 def
IDENTIFIER                    0
L_PARENTHESES                 (
INT_TYPE                      int
IDENTIFIER                    1
COMMA                         ,
INT_TYPE                      int
IDENTIFIER                    2
R_PARENTHESES                 )
L_BRACE                       {
RETURN_STATEMENT              return
IDENTIFIER                    1
ADDITION_OPERATOR             +
IDENTIFIER                    2
R_BRACE                       }
DEF_STATEMENT                 def
IDENTIFIER                    3
L_PARENTHESES                 (
R_PARENTHESES                 )
L_BRACE                       {
INT_TYPE                      int
IDENTIFIER                    4
ASSIGNMENT_OPERATOR           =
IDENTIFIER                    0
L_PARENTHESES                 (
NUMERIC_CONSTANT              5
COMMA                         ,
NUMERIC_CONSTANT              10
R_PARENTHESES                 )
INT_TYPE                      int
IDENTIFIER                    5
INT_TYPE                      int
IDENTIFIER                    6
WHILE_STATEMENT               while
NUMERIC_CONSTANT              20
ADDITION_OPERATOR             +
NUMERIC_CONSTANT              10
RELATIONAL_OPERATOR           <
NUMERIC_CONSTANT              10
MULTIPLICATION_OPERATOR       *
NUMERIC_CONSTANT              2
L_BRACE                       {
IF_STATEMENT                  if
IDENTIFIER                    5
RELATIONAL_OPERATOR           >
NUMERIC_CONSTANT              10
DIVISION_OPERATOR             /
NUMERIC_CONSTANT              2
ADDITION_OPERATOR             +
NUMERIC_CONSTANT              5
PRINT_STATEMENT               print
IDENTIFIER                    5
DIVISION_OPERATOR             /
NUMERIC_CONSTANT              3
ELSE_STATEMENT                else
PRINT_STATEMENT               print
IDENTIFIER                    6
DIVISION_OPERATOR             /
NUMERIC_CONSTANT              3
IDENTIFIER                    5
ASSIGNMENT_OPERATOR           =
IDENTIFIER                    5
ADDITION_OPERATOR             +
NUMERIC_CONSTANT              1
R_BRACE                       }
R_BRACE                       }

