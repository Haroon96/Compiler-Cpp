def		DEF_STATEMENT
0		IDENTIFIER
(		L_PARENTHESES
int		INT_TYPE
[		L_SUBSCRIPT_OPERATOR
]		R_SUBSCRIPT_OPERATOR
1		IDENTIFIER
,		COMMA
int		INT_TYPE
2		IDENTIFIER
)		R_PARENTHESES
{		L_BRACE
int		INT_TYPE
3		IDENTIFIER
,		COMMA
4		IDENTIFIER
,		COMMA
5		IDENTIFIER
,		COMMA
6		IDENTIFIER
3		IDENTIFIER
=		ASSIGNMENT_OPERATOR
2		IDENTIFIER
while		WHILE_STATEMENT
7		IDENTIFIER
>		RELATIONAL_OPERATOR
0		NUMERIC_CONSTANT
{		L_BRACE
5		IDENTIFIER
=		ASSIGNMENT_OPERATOR
0		NUMERIC_CONSTANT
4		IDENTIFIER
=		ASSIGNMENT_OPERATOR
1		NUMERIC_CONSTANT
while		WHILE_STATEMENT
4		IDENTIFIER
<=		RELATIONAL_OPERATOR
3		IDENTIFIER
{		L_BRACE
if		IF_STATEMENT
1		IDENTIFIER
[		L_SUBSCRIPT_OPERATOR
4		IDENTIFIER
]		R_SUBSCRIPT_OPERATOR
<		RELATIONAL_OPERATOR
1		IDENTIFIER
[		L_SUBSCRIPT_OPERATOR
5		IDENTIFIER
]		R_SUBSCRIPT_OPERATOR
5		IDENTIFIER
=		ASSIGNMENT_OPERATOR
4		IDENTIFIER
4		IDENTIFIER
=		ASSIGNMENT_OPERATOR
4		IDENTIFIER
+		ADDITION_OPERATOR
1		NUMERIC_CONSTANT
}		R_BRACE
6		IDENTIFIER
=		ASSIGNMENT_OPERATOR
1		IDENTIFIER
[		L_SUBSCRIPT_OPERATOR
5		IDENTIFIER
]		R_SUBSCRIPT_OPERATOR
1		IDENTIFIER
[		L_SUBSCRIPT_OPERATOR
5		IDENTIFIER
]		R_SUBSCRIPT_OPERATOR
=		ASSIGNMENT_OPERATOR
1		IDENTIFIER
[		L_SUBSCRIPT_OPERATOR
3		IDENTIFIER
]		R_SUBSCRIPT_OPERATOR
1		IDENTIFIER
[		L_SUBSCRIPT_OPERATOR
3		IDENTIFIER
]		R_SUBSCRIPT_OPERATOR
=		ASSIGNMENT_OPERATOR
6		IDENTIFIER
3		IDENTIFIER
=		ASSIGNMENT_OPERATOR
3		IDENTIFIER
-		SUBTRACTION_OPERATOR
1		NUMERIC_CONSTANT
}		R_BRACE
}		R_BRACE
